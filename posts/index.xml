<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on khanhtc&#39;s blog</title>
    <link>https://khanhtc1202.github.io/posts/</link>
    <description>Recent content in Posts on khanhtc&#39;s blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Dec 2024 16:50:23 +0700</lastBuildDate>
    <atom:link href="https://khanhtc1202.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cncf Ambassador Annoucement</title>
      <link>https://khanhtc1202.github.io/posts/cncf-ambassador-annoucement/</link>
      <pubDate>Mon, 02 Dec 2024 16:50:23 +0700</pubDate>
      <guid>https://khanhtc1202.github.io/posts/cncf-ambassador-annoucement/</guid>
      <description>&lt;p&gt;Starting from November 2024, I have been officially appointed as the first CNCF ambassador in Vietnam üéâüéâ&lt;/p&gt;&#xA;&lt;p&gt;This is an important milestone for me and I hope I can contribute more and more to the CNCF as well as OSS communities in vietnam with this new role üí™&lt;/p&gt;&#xA;&lt;p&gt;B·∫Øt ƒë·∫ßu t·ª´ th√°ng 11 nƒÉm 2024, t√¥i ch√≠nh th·ª©c ƒë∆∞·ª£c b·ªï nhi·ªám l√†m ƒë·∫°i s·ª© CNCF ƒë·∫ßu ti√™n t·∫°i Vi·ªát Nam üéâüéâ&lt;/p&gt;</description>
    </item>
    <item>
      <title>From subarray problems to Kadane and applications</title>
      <link>https://khanhtc1202.github.io/posts/kadane-and-its-applications/</link>
      <pubDate>Thu, 06 Jul 2023 21:58:23 +0700</pubDate>
      <guid>https://khanhtc1202.github.io/posts/kadane-and-its-applications/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s start with a problem (src: &lt;a href=&#34;https://leetcode.com/problems/maximum-subarray/&#34;&gt;leetcode#53&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Given an integer array nums, find the subarray with the largest sum, and return its sum.&#xA;&#xA;Constraints:&#xA;„Éª 1 &amp;lt;= nums.length &amp;lt;= 1e5&#xA;„Éª -1e4 &amp;lt;= nums[i] &amp;lt;= 1e4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since subarray means to a contiguous non-empty sequence of elements within an array. It&amp;rsquo;s easy to find the trivial solution where we try to calculate all possible subarray.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Cpp&#34; data-lang=&#34;Cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;Solution&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;public&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; maxSubArray(vector&amp;lt;&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; ans = INT_MIN;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; l = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;; l &amp;lt; nums.size(); ++l) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; r = l; r &amp;lt; nums.size(); ++r) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; sum = &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#888;font-weight:bold&#34;&gt;int&lt;/span&gt; i = l; i &amp;lt;= r; i++) sum += nums[i];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                ans = max(ans, sum);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; ans;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The time complexity for this solution is $O(n^{3})$ which clearly impossible to be an AC solution. Then how to update that?&lt;/p&gt;</description>
    </item>
    <item>
      <title>An Approach for DP Problem</title>
      <link>https://khanhtc1202.github.io/posts/an-approach-for-dp-problem/</link>
      <pubDate>Sat, 24 Jun 2023 13:00:04 +0700</pubDate>
      <guid>https://khanhtc1202.github.io/posts/an-approach-for-dp-problem/</guid>
      <description>&lt;p&gt;Start with the problem (src: &lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;leetcode#714&lt;/a&gt;)&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.&#xA;&#xA;Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.&#xA;&#xA;Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;how-do-we-know-its-a-dynamic-programming-dp-problem-&#34;&gt;How do we know it&amp;rsquo;s a Dynamic Programming (DP) problem? üí≠&lt;/h3&gt;&#xA;&lt;p&gt;It&amp;rsquo;s based on your sense ;) But there are some signs that you can follow&lt;/p&gt;</description>
    </item>
    <item>
      <title>A breakthrough of my mind</title>
      <link>https://khanhtc1202.github.io/posts/some-thought-about-tactics/</link>
      <pubDate>Sun, 24 Jan 2021 21:21:01 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/some-thought-about-tactics/</guid>
      <description>&lt;p&gt;Today I got a really nice chess puzzle that makes me review all of my knowledge, or even more important - the way I should think strategically. ü§î&lt;/p&gt;&#xA;&lt;img width=&#34;100%&#34; alt=&#34;chess puzzle 1&#34; src=&#34;https://user-images.githubusercontent.com/32532742/105636360-6614f480-5eab-11eb-98bc-d526e991537a.png&#34;&gt;&#xA;&lt;p&gt;via &lt;a href=&#34;https://chess.com&#34;&gt;chess.com&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The puzzle starts with black makes Na5, white to move.&lt;/p&gt;&#xA;&lt;p&gt;To this day, what I have learned about chess strategies could be shortened into: seek to prevail. There are many shapes of prevail, that is:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;checkmate the opposite king&lt;/li&gt;&#xA;&lt;li&gt;gain the advantage in trading pieces (sacrifice)&lt;/li&gt;&#xA;&lt;li&gt;take the advantage of space (suppress, narrow the opponent&amp;rsquo;s scope of activity)&lt;/li&gt;&#xA;&lt;li&gt;promotion&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Apply to the current situation, white wins one piece (a pawn which means 1 point but it&amp;rsquo;s just a gambit), a little bit advantage of space (a pawn in d5 followed by Bishop at c4), a bad move of black pawn f7. And on top of that, white has a strong Bishop - Bc4 which makes a threat to Kg8 indirectly.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Process, Thread and Routine</title>
      <link>https://khanhtc1202.github.io/posts/concurrent-unit/</link>
      <pubDate>Fri, 28 Feb 2020 03:56:38 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/concurrent-unit/</guid>
      <description>&lt;h2 id=&#34;process-and-thread&#34;&gt;Process and Thread&lt;/h2&gt;&#xA;&lt;h3 id=&#34;process&#34;&gt;Process&lt;/h3&gt;&#xA;&lt;p&gt;Ti·∫øn tr√¨nh c√≥ th·ªÉ hi·ªÉu ƒë∆°n gi·∫£n l√† m·ªôt ch∆∞∆°ng tr√¨nh ƒëang ch·∫°y trong m√°y t√≠nh. Khi ch√∫ng ta m·ªü m·ªôt trang web tr√¨nh duy·ªát th√¨ ƒë√¢y ƒë∆∞·ª£c xem l√† m·ªôt ti·∫øn tr√¨nh. Khi ch√∫ng ta vi·∫øt 1 ch∆∞∆°ng tr√¨nh m√°y t√≠nh b·∫±ng ng√¥n ng·ªØ l·∫≠p tr√¨nh nh∆∞ C, Java, hay Go, sau khi ti·∫øn h√†nh bi√™n d·ªãch v√† ch·∫°y ch∆∞∆°ng tr√¨nh th√¨ h·ªá ƒëi·ªÅu h√†nh s·∫Ω c·∫•p cho ch∆∞∆°ng tr√¨nh m·ªôt kh√¥ng gian b·ªô nh·ªõ nh·∫•t ƒë·ªãnh, PID (process ID),&amp;hellip; M·ªói ti·∫øn tr√¨nh c√≥ √≠t nh·∫•t m·ªôt lu·ªìng ch√≠nh (main thread) ƒë·ªÉ ch·∫°y ch∆∞∆°ng tr√¨nh, n√≥ nh∆∞ l√† x∆∞∆°ng s·ªëng c·ªßa ch∆∞∆°ng tr√¨nh v·∫≠y. Khi lu·ªìng ch√≠nh n√†y ng·ª´ng ho·∫°t ƒë·ªông t∆∞∆°ng ·ª©ng v·ªõi vi·ªác ch∆∞∆°ng tr√¨nh b·ªã t·∫Øt.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Complexity Classes</title>
      <link>https://khanhtc1202.github.io/posts/complexity-classes/</link>
      <pubDate>Tue, 19 Nov 2019 00:51:18 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/complexity-classes/</guid>
      <description>&lt;p&gt;The following list contains common time complexities of algorithms:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;O(1) The running time of a constant-time algorithm does not depend on the input size. A typical constant-time algorithm is a direct formula that calculates the answer.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;O($\log n$) A logarithmic algorithm often halves the input size at each step. The running time of such an algorithm is logarithmic, because $\log n$ equals the number of times n must be divided by 2 to get 1.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dining Philosophers</title>
      <link>https://khanhtc1202.github.io/posts/dining-philosophers/</link>
      <pubDate>Mon, 04 Nov 2019 21:39:03 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/dining-philosophers/</guid>
      <description>&lt;p&gt;B·ªØa t·ªëi c·ªßa c√°c tri·∫øt gia (dining philosophers problem) l√† m·ªôt v√≠ d·ª• n·ªïi ti·∫øng khi nh·∫Øc ƒë·∫øn c√°c v·∫•n ƒë·ªÅ trong b√†i to√°n x·ª≠ l√Ω concurrent.&lt;/p&gt;&#xA;&lt;p&gt;V·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t bi·ªÉu nh∆∞ sau: Cho 5 tri·∫øt gia ng·ªìi chung m·ªôt b√†n tr√≤n v·ªõi 5 chi·∫øc ƒë≈©a x·∫øp xem k·∫Ω gi·ªØa 2 ng∆∞·ªùi ng·ªìi c·∫°nh nhau nh∆∞ h√¨nh&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://sphof.readthedocs.io/_images/philtable.png&#34; alt=&#34;Dining Philosophers&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;img: sphof.readthedocs.io&lt;/p&gt;&#xA;&lt;p&gt;M·ªói tri·∫øt gia t√¨m c√°ch ƒë·ªÉ ƒÉn ƒë∆∞·ª£c th·ª©c ƒÉn t·ª´ ƒëƒ©a c·ªßa m√¨nh v·ªõi ƒëi·ªÅu ki·ªán: &amp;ldquo;ch·ªâ ai c√≥ 2 chi·∫øc ƒë≈©a c·∫°nh m√¨nh m·ªõi ƒë∆∞·ª£c ph√©p ƒÉn&amp;rdquo;, do ƒë√≥ h·ªç l·∫ßn l∆∞·ª£t ƒë·ªïi tr·∫°ng th√°i gi·ªØa ƒÉn (eating) v√† ƒë·ª£i (thinking) :)) M·ªói ng∆∞·ªùi sau khi gi·ªØa ƒë√¥i ƒë≈©a ƒë·ªÉ ƒÉn sau 1 kho·∫£ng th·ªùi gian ph·∫£i b·ªè l·∫°i 2 chi·∫øc ƒë≈©a v·ªÅ v·ªã tr√≠ c≈© ƒë·ªÉ ti·∫øp t·ª•c qu√° tr√¨nh n√†y. Y√™u c·∫ßu: t√¨m m·ªôt ph∆∞∆°ng ph√°p ƒë·∫£m b·∫£o ƒë·ªÉ c√°c tri·∫øt gia ƒë·ªÅu c√≥ th·ªÉ ƒëk ƒÉn / ƒë·ª£i ƒë·ªïi l∆∞·ª£t ƒë·ªÉ kh√¥ng ai b·ªã ch·∫øt ƒë√≥i (ch·ªâ ƒë·ª£i ch·ª© kh√¥ng ƒë∆∞·ª£c ƒÉn).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Immutable Go Object</title>
      <link>https://khanhtc1202.github.io/posts/immutable-go-object/</link>
      <pubDate>Mon, 30 Sep 2019 22:57:39 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/immutable-go-object/</guid>
      <description>&lt;p&gt;Every Go programmer knows about the &lt;code&gt;receiver&lt;/code&gt; in go, which be declared as:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;type&lt;/span&gt; X &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;struct&lt;/span&gt; {}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;func&lt;/span&gt; (receiver X) &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;doThing&lt;/span&gt;() {...}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We have two types of receiver in Golang, which is &lt;strong&gt;Value receiver&lt;/strong&gt; and &lt;strong&gt;Pointer receiver&lt;/strong&gt;. Basically, the receiver in Golang could be map to &lt;code&gt;self&lt;/code&gt; in other programming languages and the function which uses the receiver will be pointed from struct type of the receiver.&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;So, what does this means, anyway?&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Imperative vs Functional</title>
      <link>https://khanhtc1202.github.io/posts/imperative-vs-funcional/</link>
      <pubDate>Tue, 17 Sep 2019 23:01:32 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/imperative-vs-funcional/</guid>
      <description>&lt;p&gt;Difference between Imperative languages and Functional languages:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Imperative languages are based on assignment sequences whereas functional languages are based on nested function calls.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;In imperative languages, the same name may be associated with several values, whereas in functional languages a name is only associated with one value.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Imperative languages have fixed evaluation orders whereas functional languages need not.(1)&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;In imperative languages, new values may be associated with the same name through command repetition whereas in functional languages new names are associated with new values through recursive function call nesting.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Boundaries for algorithm analysis</title>
      <link>https://khanhtc1202.github.io/posts/competitive-prog-bound/</link>
      <pubDate>Thu, 15 Aug 2019 07:18:49 +0900</pubDate>
      <guid>https://khanhtc1202.github.io/posts/competitive-prog-bound/</guid>
      <description>&lt;p&gt;Some boundaries you should know to approximate time and space complexity of your algorithm.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;$2^{10} = 1,024 \approx 10^{3}, 2^{20} = 1,048,576 \approx 10^{6}$&lt;/li&gt;&#xA;&lt;li&gt;32-bit signed integers (&lt;strong&gt;int&lt;/strong&gt;) and 64-bit signed integers (&lt;strong&gt;long long&lt;/strong&gt;) have upper limits of $2^{31} ‚àí 1 \approx 2 \times 10^{9}$ (safe for up to $\approx 9$ decimal digits) and $2^{63} ‚àí 1 \approx 9 \times 10^{18}$ (safe for up to $\approx 18$ decimal digits) respectively.&lt;/li&gt;&#xA;&lt;li&gt;Unsigned integers can be used if only non-negative numbers are required. 32-bit unsigned integers (&lt;strong&gt;unsigned int&lt;/strong&gt;) and 64-bit unsigned integers (&lt;strong&gt;unsigned long long&lt;/strong&gt;) have upper limits of $2^{32} ‚àí 1 \approx 4 \times 10^{9}$ and $2^{64} ‚àí 1 \approx 1.8 \times 10^{19}$ respectively.&lt;/li&gt;&#xA;&lt;li&gt;There are $n!$ permutations and $2^{n}$ subsets (or combinations) of n elements.&lt;/li&gt;&#xA;&lt;li&gt;The best time complexity of a comparison-based sorting algorithm is $Œ©(n\log_{2}{n})$.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Notes:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrate to NoSql</title>
      <link>https://khanhtc1202.github.io/posts/migrate-to-nosql/</link>
      <pubDate>Wed, 10 Jul 2019 22:34:41 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/migrate-to-nosql/</guid>
      <description>&lt;p&gt;M·ªôt ƒëi·ªÅu ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn r·∫•t nhi·ªáu khi chuy·ªÉn t·ª´ sql sang nosql l√† c√°ch ƒë·ªÉ l∆∞u tr·ªØ quan h·ªá gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng trong database. M·ªôt ƒë·ªëi t∆∞·ª£ng th∆∞·ªùng r·∫•t √≠t khi t·ªìn t·∫°i ƒë·ªôc l√¢p trong m·ªôt h·ªá th·ªëng m√† n·∫Øm gi·ªØ 1 ph·∫ßn th√¥ng tin ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o ra m·ªôt ƒë·ªëi t∆∞·ª£ng kh√°c.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;p&gt;C√°c d·∫°ng quan h·ªá ch√≠nh gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ l∆∞u ƒë∆∞·ª£c trong c∆° s·ªü d·ªØ li·ªáu quan h·ªá bao g·ªìm&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type embedding not inheritance</title>
      <link>https://khanhtc1202.github.io/posts/type_embedding/</link>
      <pubDate>Mon, 25 Mar 2019 23:00:13 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/type_embedding/</guid>
      <description>&lt;p&gt;Since we don‚Äôt have classes in go, you can say &lt;code&gt;struct&lt;/code&gt; will do a job to make objects. So how 4 principles of object-oriented programming represent in Golang? In this post, we will discuss the principle of OOP that make Golang better than others object-oriented programming language: &lt;strong&gt;inheritance&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;p&gt;A simple question, how does Golang represent inheritance principle even if it doesn&amp;rsquo;t have &lt;code&gt;extends&lt;/code&gt;? We can easily find out the answer to this question: &lt;strong&gt;embedding type&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Why can&#39;t initialize object from abstract class (java)</title>
      <link>https://khanhtc1202.github.io/posts/why_can_not_new_abstract_class/</link>
      <pubDate>Sat, 23 Mar 2019 01:50:54 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/why_can_not_new_abstract_class/</guid>
      <description>&lt;p&gt;Difference between Abstract class and Interface is one of the most be confused problem when the first time I learnt Java. In which case we should use Abstract class and which case we should use Interface? Let&amp;rsquo;s take a deeper look in this two of concepts.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;p&gt;By defination, the Abstract class (java) is a &lt;strong&gt;class but unlike a simple java class, it&amp;rsquo;s may not only contain regular defined methods but may also contain abstract methods or a mix of regular and abstract methods.&lt;/strong&gt; Some of Abstract class&amp;rsquo;s properties that make is different from Interface can be listed are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How much your objects encapsulate ?</title>
      <link>https://khanhtc1202.github.io/posts/encapsulate/</link>
      <pubDate>Sun, 24 Feb 2019 18:46:19 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/encapsulate/</guid>
      <description>&lt;p&gt;Encapsulate ( t√†i li·ªáu ti·∫øng Vi·ªát th∆∞·ªùng d·ªãch l√† &lt;code&gt;ƒë√≥ng g√≥i&lt;/code&gt; ) hay ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn v√† v√≠ d·ª• nh∆∞ l√† c√°ch ƒë·ªÉ &lt;code&gt;che gi·∫•u&lt;/code&gt; th√¥ng tin trong l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng.&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;T·ª©c l√† tr·∫°ng th√°i c·ªßa ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c b·∫£o v·ªá kh√¥ng cho c√°c truy c·∫≠p t·ª´ code b√™n ngo√†i nh∆∞ thay ƒë·ªïi trong th√°i hay nh√¨n tr·ª±c ti·∫øp. Vi·ªác cho ph√©p m√¥i tr∆∞·ªùng b√™n ngo√†i t√°c ƒë·ªông l√™n c√°c d·ªØ li·ªáu n·ªôi t·∫°i c·ªßa m·ªôt ƒë·ªëi t∆∞·ª£ng theo c√°ch n√†o l√† ho√†n to√†n t√πy thu·ªôc v√†o ng∆∞·ªùi vi·∫øt m√£. ƒê√¢y l√† t√≠nh ch·∫•t ƒë·∫£m b·∫£o s·ª± to√†n v·∫πn, b·∫£o m·∫≠t c·ªßa ƒë·ªëi t∆∞·ª£ng Trong Java, t√≠nh ƒë√≥ng g√≥i ƒë∆∞·ª£c th·ªÉ hi·ªán th√¥ng qua ph·∫°m vi truy c·∫≠p (access modifier).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fun thing with browser inspect</title>
      <link>https://khanhtc1202.github.io/posts/content-trick/</link>
      <pubDate>Fri, 31 Aug 2018 02:55:20 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/content-trick/</guid>
      <description>&lt;p&gt;Ch·∫Øc h·∫≥n √≠t ai c√≥ th·ªÉ m·∫°nh mi·ªáng kh·∫≥ng ƒë·ªãnh r·∫±ng: Trong su·ªët qu√£ng th·ªùi gian t·ª´ khi bi·∫øt ƒë·∫øn internet cho ƒë·∫øn hi·ªán t·∫°i, ch∆∞a m·ªôt l·∫ßn t·ª´ng t·∫£i n·ªôi dung s·ªë kh√¥ng vi ph·∫°m b·∫£n quy·ªÅn tr√™n internet. N√≥i v·∫≠y b·ªüi v√¨ ƒë∆°n gi·∫£n nh∆∞ m·ªôt b·ª©c ·∫£nh b·∫°n t·∫£i t·ª´ 1 trang web ƒë√£ public c≈©ng c√≥ th·ªÉ l√† ·∫£nh ƒë∆∞·ª£c l·∫•y m·ªôt c√°ch kh√¥ng ch√≠nh th·ª©c t·ª´ m·ªôt ngu·ªìn n√†o ƒë√≥ :)) V·ªÅ ph√≠a ng∆∞·ªùi d√πng, h·ªç lu√¥n mu·ªën nh·∫≠n nhi·ªÅu h∆°n, ng∆∞·ª£c l·∫°i t·∫•t nhi√™n ng∆∞·ªùi s·ªü h·ªØu n·ªôi dung s·ªë (media content) kh√¥ng mu·ªën v·∫≠y :))&lt;/p&gt;</description>
    </item>
    <item>
      <title>Play around with goroutine</title>
      <link>https://khanhtc1202.github.io/posts/play-around-with-gorountine/</link>
      <pubDate>Sat, 21 Jul 2018 18:59:07 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/play-around-with-gorountine/</guid>
      <description>&lt;p&gt;H√¥m nay trong l√∫c l∆∞·ª£n l·ªù &lt;a href=&#34;https://tour.golang.org/list&#34;&gt;go tour&lt;/a&gt; - m·ªôt guide kh√° ƒë·∫ßy ƒë·ªß v√† th√∫ v·ªã gi·ªõi thi·ªáu v·ªÅ golang, m√¨nh b·∫Øt g·∫∑p m·ªôt ƒëo·∫°n kh√° th√∫ v·ªã :))&lt;/p&gt;&#xA;&lt;!-- more --&gt;&#xA;&lt;p&gt;Trong m·ª•c concurrency in golang, gi·ªõi thi·ªáu v·ªÅ goroutine - m·ªôt ƒëi·ªÉm r·∫•t m·∫°nh c·ªßa golang d√πng thay th·∫ø cho thread trong c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh kh√°c - item 7 c√≥ nh·∫Øc l·∫°i ki·∫øn th·ª©c v·ªÅ tree. Trong ƒë√≥ c√≥ ƒë∆∞a ra 1 quiz nh·ªè nh∆∞ sau:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Package Manager ??</title>
      <link>https://khanhtc1202.github.io/posts/install-nodejs/</link>
      <pubDate>Tue, 19 Jun 2018 01:13:17 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/install-nodejs/</guid>
      <description>&lt;p&gt;T·ª´ c√°i ng√†y tr·∫ª tr√¢u copy icon half-life v√†o usb cho ƒë·∫øn khi bi·∫øt click next next next trong installer c·ªßa m·∫•y c√°i app tr√™n windows, b√¢y gi·ªù nh√¨n l·∫°i v·ªõi m√¨nh v·∫´n l√† c·∫£ m·ªôt b·∫ßu tr·ªùi k·ªâ ni·ªám :)) T·ª´ h·ªìi ƒë√≥ c≈©ng g·ªçi l√† c√≥ bi·∫øt ch√∫t √≠t c√°i shell c·ªßa windows nh∆∞ng c≈©ng ch·∫≥ng m·∫•y khi ƒë·ªông ƒë·∫øn. Cho ƒë·∫øn khi l·∫ßn ƒë·∫ßu ti·∫øp x√∫c v·ªõi linux, t∆∞∆°ng t√°c h·ªìi ƒë√≥ v·∫´n ch·ªß y·∫øu l√† tr·ªè chu·ªôt. D·∫ßn d·∫ßn khi ƒë√£ quen v√† t∆∞∆°ng t√°c chuy·ªÉn d·∫ßn sang terminal, c·∫£m gi√°c c√†i app v·ªõi command k·ªÉ c≈©ng ng·∫ßu ng·∫ßu :)).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ninja Code</title>
      <link>https://khanhtc1202.github.io/posts/ninja-code/</link>
      <pubDate>Tue, 05 Jun 2018 17:10:45 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/ninja-code/</guid>
      <description>&lt;p&gt;N·∫øu coding gi·ªëng nh∆∞ m·ªôt tr·∫≠n chi·∫øn gi·ªØa programer v√† problem c·∫ßn gi·∫£i quy·∫øt th√¨, gi·ªëng nh∆∞ nh·ªØng chi·∫øn binh th·ª±c th·ª±, ch√∫ng ta t√¨m ki·∫øm ƒë·∫°o (ph∆∞∆°ng ph√°p chi·∫øn ƒë·∫•u) ph√π h·ª£p cho ch√≠nh m√¨nh. Trong b·∫°t ng√†n nh·ªØng ƒë·∫°o (nh·ªØng nguy√™n l√Ω), kinh d·ªãch (article tr√™n blog c·ªßa nh·ªØng blogger n·ªïi ti·∫øng), ch√∫ th√≠ch kinh nghi·ªám (nh·ªØng note, post ƒë∆∞·ª£c ƒë√¥ng ƒë·∫£o dev &lt;code&gt;kip&lt;/code&gt; l·∫°i),&amp;hellip;ƒë√¢u ƒë√≥ quanh ƒë√¢y v·∫´n t·ªìn t·∫°i m·ªôt ƒë·∫°o m√† kh√¥ng m·∫•y ai ƒë·ªÉ √Ω ƒë·∫øn nh∆∞ng s·ªë ng∆∞·ªùi theo th√¨ ƒë·∫øm kh√¥ng k·ªÉ h·∫øt. C√≥ ng∆∞·ªùi ƒë·∫Øc ƒë·∫°o ho√†n to√†n, c√≥ ng∆∞·ªùi m·ªôt ph·∫ßn, tuy theo nhi·ªÅu m·ª©c ƒë·ªô kh√°c nhau nh∆∞ng t·ª±u chung c√≥ th·ªÉ coi ƒë·ªÅu l√† ƒë·ªìng ƒë·∫°o trong m√¥n ph√°i n√†y :))&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dependency Injection in a nutshell</title>
      <link>https://khanhtc1202.github.io/posts/dependency-injection/</link>
      <pubDate>Mon, 21 May 2018 13:13:40 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/dependency-injection/</guid>
      <description>&lt;p&gt;As a developer, we write code day by day, try to handle many things, put all the thing in the right way it should be. Almost of our time is spent to googling usage of libraries (or frameworks), try to handle some incredible bugs or try to maintain some shitty things from other guys you may never ever met. All this mess made us forget about something that really have a meaning, it made us forget that our job is not just try to handle all the things, but our job is focused on &lt;code&gt;creating the new thing depend on another guy achievement&lt;/code&gt;. But the reason why we are so confused lies in our purpose. Just like the picture below, sometime you realize yourself that you are just a noob and trying to handle all that mess - the mess named dependencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Sample App for Flux Architecture</title>
      <link>https://khanhtc1202.github.io/posts/flux-arch/</link>
      <pubDate>Sun, 15 Apr 2018 20:20:57 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/flux-arch/</guid>
      <description>&lt;p&gt;M√¨nh ƒë∆∞·ª£c tuy·ªÉn v·ªÅ l√†m java dev nh∆∞ng do s·ªë nh·ªç, t·ª´ khi ƒëi l√†m ƒë·∫øn gi·ªù s·ªë ng√†y dev java c·ªßa m√¨nh ch·∫Øc √≠t h∆°n ƒë·∫ßu ng√≥n tay. B·ªã quƒÉng qua l·∫°i l√†m t·ª´ python, ruby, clojure, golang,&amp;hellip;ƒë·∫øn gi·ªù th√¨ c√°i g√¨ ƒë·∫øn c≈©ng ph·∫£i ƒë·∫øn, m√¨nh b·ªã d√≠ sang l√†m react trong m·ªôt d·ª± √°n m·ªõi. M√¨nh v·ªën c·ª±c k√¨ noob frontend app, n√™n khi nh·∫≠n ƒë∆∞·ª£c c·ª•m &lt;code&gt;flux architecture&lt;/code&gt; trong m·ªôt bu·ªïi h·ªçp n·ªç, m√¨nh nh·∫≠n ra ngay ƒë·∫•y l√† c·ª©u c√°nh duy nh·∫•t c·ªßa m√¨nh ( ngo√†i architecture ra th√¨ m√¨nh kh√¥ng ƒë·∫∑c bi·ªát quan t√¢m c√°i g√¨ l·∫Øm :)) ). Sau v√†i gi·ªù google th√¨ d√π t√¨m l√≤i m·∫Øt m√¨nh c≈©ng &lt;code&gt;kh√¥ng th·∫•y c√°i sample n√†o t·ª≠ t·∫ø ho·∫∑c ƒë·ªß ƒë·ªÉ noobs nh∆∞ m√¨nh hi·ªÉu&lt;/code&gt; n√™n quy·∫øt ƒë·ªãnh t·ª± l√†m 1 c√°i, d√π sao th√¨ t·ª´ h∆∞·ªõng architecture, flux c≈©ng kh√° l√† th√∫ v·ªã.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Log Viewer via HTTP</title>
      <link>https://khanhtc1202.github.io/posts/view-log/</link>
      <pubDate>Fri, 30 Mar 2018 17:17:44 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/view-log/</guid>
      <description>&lt;p&gt;Nh√¢n m·ªôt cu·ªëi tu·∫ßn r·∫£nh r·ªói cao h·ª©ng n√†o ƒë·∫•y, m√¨nh ƒë√£ build m·ªôt h·ªá th·ªëng nh·ªè - m·ª•c ƒë√≠ch ch√≠nh ƒë·ªÉ n√≥ gi√∫p m√¨nh &lt;strong&gt;clone t·ª± ƒë·ªông anime m·ªõi&lt;/strong&gt; t·ª´ c√°c trang m√¨nh ƒë√£ thu th·∫≠p rss (ph·∫ßn v√¨ m√¨nh l∆∞·ªùi down t·ª´ng t·∫≠p, ph·∫ßn do ƒë·ª£t n√†y m√¨nh hay qu√™n n√™n ü§£).&lt;/p&gt;&#xA;&lt;p&gt;Do l√† c√°i h·ªá th·ªëng vi·∫øt ch∆°i b·ªùi trong 2 ng√†y ngh·ªâ n√™n n√≥ thi·∫øu ƒë·ªß th·ª© ü§ß&amp;hellip; L√∫c ƒë·∫ßu, m√¨nh ch·ªâ t·∫≠p trung v√†o vi·∫øt cho n√≥ ch·∫°y, nh∆∞ng th·ªùi gian ƒë·∫ßu - do m·ªôt s·ªë l√Ω do kh√≥ n√≥i - m√† n√≥ ch·∫øt s·∫≠p li√™n t·ª•c üòü m√¨nh b·∫Øt ƒë·∫ßu nghƒ© ƒë·∫øn logging, t·∫•t nhi√™n l√† log ra file th√¥i&amp;hellip;Sau ƒë·∫•y m·ªôt th·ªùi gian khi ƒë√£ ch·∫°y kh√° ·ªïn ƒë·ªãnh, d·∫ßn d·∫ßn b·∫£n th√¢n vi·ªác &lt;strong&gt;m√≤ v√†o server ƒë·ªÉ m·ªü file log ra ƒë·ªçc&lt;/strong&gt; m√¨nh c≈©ng l∆∞·ªùi n·ªët ü§§ n√™n b·∫Øt ƒë·∫ßu nghƒ© xem c√≥ c√°ch n√†o ƒë∆°n gi·∫£n (kh√¥ng ph·∫£i c√†i hay d√πng th√™m d·ªãch v·ª• ngo√†i n√†o) m√† c√≥ th·ªÉ gi√∫p xem lu√¥n log file ·ªü server t·ª´ tr√¨nh duy·ªát kh√¥ng üßê&lt;/p&gt;</description>
    </item>
    <item>
      <title>Compile C program in manual way</title>
      <link>https://khanhtc1202.github.io/posts/compile-c-source/</link>
      <pubDate>Mon, 26 Mar 2018 01:09:47 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/compile-c-source/</guid>
      <description>&lt;p&gt;After hard coding your program hour by hour (sometime, it becomes year by year :) ), one of the most uncomfortable time is compiling it into executable file. As usually, we are going to compile a program by the hardest way to do it, just because it will make us knows that in some case, &lt;code&gt;gcc&lt;/code&gt; is really a hero :))&lt;/p&gt;&#xA;&lt;p&gt;The post&amp;rsquo;s content is about compiling a C program by manual way. In that program, we use an external lib, defined by yourself.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Memory trick</title>
      <link>https://khanhtc1202.github.io/posts/mem-trick/</link>
      <pubDate>Fri, 22 Dec 2017 18:42:41 +0000</pubDate>
      <guid>https://khanhtc1202.github.io/posts/mem-trick/</guid>
      <description>&lt;p&gt;N·∫øu ƒë√£ t·ª´ng c√≥ th·ªùi gian l√†m vi·ªác v·ªõi C (hay √¥ng n√†o kinh h∆°n l√†m h·∫≥n v·ªõi Assembly :) ) ch·∫Øc ai c≈©ng nh·ªõ s·ª± kinh ho√†ng c·ªßa &lt;strong&gt;core dump fail&lt;/strong&gt; :&amp;rsquo;( . D√π c√≥ s·ª≠ d·ª•ng &lt;a href=&#34;https://en.wikipedia.org/wiki/GNU_Debugger&#34;&gt;&lt;code&gt;gdb&lt;/code&gt;&lt;/a&gt; debug th√¨ ch·∫Øc c≈©ng ph·∫£i b·ªè ra c·∫£ m·ªõ th·ªùi gian v√† c√¥ng s·ª©c m√† nhi·ªÅu khi l·ªói b·∫Øt ngu·ªìn t·ª´ nh·ªØng c√°i v·ªõ v·∫©n n√†o ƒë√≥ m√† b√¨nh th∆∞·ªùng ta kh√¥ng ƒë·ªÉ √Ω :&amp;rsquo;( . M·∫∑t kh√°c b·∫°n n√™n th·∫•y may m·∫Øn khi √≠t ra c√≤n bi·∫øt ch∆∞∆°ng tr√¨nh ƒë√£ l·ªói ·ªü ƒë√¢u ƒë√≥ ƒë·ªÉ m√† s·ª≠a, c√≥ nh·ªØng l·ªói n·∫±m ·ªü nh∆∞ng n∆°i hi·ªÉm h∆°n - kh√¥ng l√†m cho ch∆∞∆°ng tr√¨nh d·ª´ng nh∆∞ng k·∫øt qu·∫£ th√¨ sai l√®. M·ªôt trong s·ªë nh·ªØng nguy√™n nh√¢n ch√≠nh d·∫´n ƒë·∫øn n√≥ l√† v·∫•n ƒë·ªÅ &lt;a href=&#34;https://en.wikipedia.org/wiki/Overflow&#34;&gt;&lt;code&gt;tr√†n s·ªë&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
